#!/system/bin/sh

alias bb=/res/bin/busybox;
BB=/res/bin/busybox;
INC=/data/PRIME-Kernel/bin/xposed.inc
PRIME=/data/PRIME-Kernel

case $1 in
donotclear)
    P=/res/synapse/settings/synapse_do_not_clear
    if [ ! -f $P ]; then
        echo 0 > $P
    fi
    if [ ! -z $2 ]; then
        if [ $2 -eq 1 ]; then
            touch /sdcard/Synapse/.do_not_remove_data
            echo 1 > $P
            echo 1
        else
            rm /sdcard/Synapse/.do_not_remove_data > /dev/null 2>&1
            echo 0 > $P
            echo 0
        fi
    else
        echo $(cat $P)
    fi
    ;;

/res/synapse/settings/gms_drain)
	if [ ! -z $2 ]; then
		echo $2 > $1
		VAR=$(cat $1)
		if [ $VAR -eq 1 ]; then
			(while :
			do
				pid=$(bb pidof com.google.android.gms)
				if [ ! -z $pid ]; then
					sleep 1
					kill $pid 2> /dev/null;
					pm enable com.google.android.gms/.update.SystemUpdateActivity > /dev/null 2>&1;
					pm enable com.google.android.gms/.update.SystemUpdateService > /dev/null 2>&1;
					pm enable com.google.android.gms/.update.SystemUpdateService$ActiveReceiver > /dev/null 2>&1;
					pm enable com.google.android.gms/.update.SystemUpdateService$Receiver > /dev/null 2>&1;
					pm enable com.google.android.gms/.update.SystemUpdateService$SecretCodeReceiver > /dev/null 2>&1;
					pm enable com.google.android.gsf/.update.SystemUpdateActivity > /dev/null 2>&1;
					pm enable com.google.android.gsf/.update.SystemUpdatePanoActivity > /dev/null 2>&1;
					pm enable com.google.android.gsf/.update.SystemUpdateService > /dev/null 2>&1;
					pm enable com.google.android.gsf/.update.SystemUpdateService$Receiver > /dev/null 2>&1;
					pm enable com.google.android.gsf/.update.SystemUpdateService$SecretCodeReceiver > /dev/null 2>&1;
					break;
				else
					sleep 1
				fi
			done
			) &
		fi
	fi
	echo $(cat $1)
;;

/res/synapse/settings/dcm_drain)
	if [ ! -z $2 ]; then
		echo $2 > $1
		VAR=$(cat $1)
		if [ $VAR -eq 1 ]; then
			pm disable com.samsung.dcm > /dev/null 2>&1;
		else
			pm enable com.samsung.dcm > /dev/null 2>&1;
		fi
	fi
	echo $(cat $1)
;;

rootcloak)
	HIDE_BRIDGE=$(cat $PRIME/synapse/settings/root_hide_bridge)
	HIDE_BB=$(cat $PRIME/synapse/settings/root_hide_busybox)
	HIDE_SU=$(cat $PRIME/synapse/settings/root_hide_supersu)
	LIST_BRIDGE=$(cat $PRIME/list/list_xposed_bridge.txt)
	ARG=$2
	FLAG=0

	if [ $HIDE_SU -eq 1 ]; then
		XPOSED_APK=$(cat $PRIME/list/list_xposed_apks.txt $PRIME/list/list_supersu_apks.txt)
	else
		XPOSED_APK=$(cat $PRIME/list/list_xposed_apks.txt)
	fi

	if [ ! -d $PRIME/xposed-backup ];then 
		mkdir -p $PRIME/xposed-backup;
	fi
	chmod 0775 $PRIME/xposed-backup

	if [ $ARG == "hide" ]; then
		mount -o rw,remount /system
		for apps in $XPOSED_APK
		do
			[ -z "$apps" ] && continue
			if [ -d /data/data/$apps ]; then
				DATA=/data/data/$apps
				APK=$(pm list packages -f|grep -e "$apps$")
				APK=${APK%%=*} && APK=${APK##package:}
				if [ $(bb expr match "$APK" '/system/app/') -gt 0 ]; then
					echo "ERROR: $APK is system app!"
					continue
				fi
				bb tar -czf $PRIME/xposed-backup/$apps.data.tar.gz . -C $DATA
				cp -f $APK $PRIME/xposed-backup/$apps.apk
				chmod 0774 $PRIME/xposed-backup/$apps.apk
				pm uninstall $apps >/dev/null 2>&1
				if [ $FLAG -eq 0 ]; then 
					echo "HIDE: $apps"
				else
					echo " & $apps"
				fi
				FLAG=1
			fi
		done

		if [ $HIDE_BB -eq 1 ] && [ -f /system/xbin/busybox ]; then
			for i in $(/system/xbin/busybox --list); do
				is_symlink=`bb readlink /system/xbin/$i`
				[[ "$is_symlink" == "/system/xbin/busybox" ]] && bb rm -f /system/xbin/$i;
			done
            rm -f /system/xbin/busybox;
            echo 1 > $PRIME/synapse/settings/bbins_last
        fi
		
		if [ $FLAG -eq 1 ]; then
			if [ $HIDE_BRIDGE -eq 1 ]; then
			for bridge in $LIST_BRIDGE
			do
				[ -z "$bridge" ] && continue
				if [ -f /system/framework/$bridge ]; then
					mv /system/framework/$bridge /system/framework/$bridge.bak
				fi
			done
			fi
		else
			echo "Framework Not Found !"
		fi
	fi
	if [ $ARG == "show" ]; then
		mount -o rw,remount /system
		for apps in $XPOSED_APK
		do
			[ -z "$apps" ] && continue
			if [ -f $PRIME/xposed-backup/$apps.apk ]; then
				DATA=/data/data/$apps
				chmod 0774 $PRIME/xposed-backup/$apps.apk
				pm install $PRIME/xposed-backup/$apps.apk >/dev/null 2>&1
				OWN=`bb stat -c %u.%g $DATA`
				bb tar -xzf $PRIME/xposed-backup/$apps.data.tar.gz -C $DATA
				bb chown -R $OWN $DATA
				rm -f $PRIME/xposed-backup/$apps.data.tar.gz
				rm -f $PRIME/xposed-backup/$apps.apk
				if [ $FLAG -eq 0 ]; then 
					echo "SHOW: $apps "
				else
					echo " & $apps"
				fi
				FLAG=1
			fi
		done

		BB_INST=$(cat $PRIME/synapse/settings/bbins_last)
		BB_TARGET=/system/xbin/busybox
		if [ $HIDE_BB -eq 1 ] && [ ! -f /system/xbin/busybox ]; then
			bb cp /res/bin/busybox $BB_TARGET;
			chmod 0755 $BB_TARGET
			$BB_TARGET --install -s /system/xbin
			[[ "$(bb readlink /system/xbin/su)" == "/system/xbin/busybox" ]] && bb rm -f /system/xbin/su;
            echo 1 > $PRIME/synapse/settings/bbins_last
		fi

		if [ $FLAG -eq 1 ]; then
			for bridge in $LIST_BRIDGE
			do
				[ -z "$bridge" ] && continue
				if [ -f /system/framework/$bridge.bak ]; then
					mv /system/framework/$bridge.bak /system/framework/$bridge
				fi
			done
		else
			echo "Backup Not Found !"
		fi
	fi
;;
esac
